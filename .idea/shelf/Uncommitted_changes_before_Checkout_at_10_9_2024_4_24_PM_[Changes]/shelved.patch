Index: Synthetic Data Generator for Predictive Maintenance.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.127900Z\",\r\n     \"start_time\": \"2024-10-03T14:50:30.367130Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"from datetime import datetime, timedelta\\n\",\r\n    \"import os\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 1\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.133893Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.128908Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Define column structures\\n\",\r\n    \"SENSOR_COLUMNS = {\\n\",\r\n    \"    'equipment_id': np.int32,\\n\",\r\n    \"    'timestamp': 'datetime64[ns]',\\n\",\r\n    \"    'temperature': np.float32,\\n\",\r\n    \"    'vibration': np.float32,\\n\",\r\n    \"    'pressure': np.float32,\\n\",\r\n    \"    'rotational_speed': np.float32,\\n\",\r\n    \"    'power_output': np.float32,\\n\",\r\n    \"    'noise_level': np.float32,\\n\",\r\n    \"    'voltage': np.float32,\\n\",\r\n    \"    'current': np.float32,\\n\",\r\n    \"    'oil_viscosity': np.float32\\n\",\r\n    \"}\\n\",\r\n    \"\\n\",\r\n    \"MAINTENANCE_COLUMNS = {\\n\",\r\n    \"    'equipment_id': np.int32,\\n\",\r\n    \"    'date': 'datetime64[ns]',\\n\",\r\n    \"    'maintenance_type': 'category',\\n\",\r\n    \"    'description': str,\\n\",\r\n    \"    'technician_id': np.int32,\\n\",\r\n    \"    'duration_hours': np.float32,\\n\",\r\n    \"    'cost': np.float32,\\n\",\r\n    \"    'parts_replaced': str,\\n\",\r\n    \"    'maintenance_result': 'category'\\n\",\r\n    \"}\\n\",\r\n    \"\\n\",\r\n    \"EQUIPMENT_COLUMNS = {\\n\",\r\n    \"    'equipment_id': np.int32,\\n\",\r\n    \"    'model': str,\\n\",\r\n    \"    'manufacturer': 'category',\\n\",\r\n    \"    'installation_date': 'datetime64[ns]',\\n\",\r\n    \"    'max_temperature': np.float32,\\n\",\r\n    \"    'max_pressure': np.float32,\\n\",\r\n    \"    'max_rotational_speed': np.float32,\\n\",\r\n    \"    'expected_lifetime_years': np.float32,\\n\",\r\n    \"    'warranty_period_years': np.int32,\\n\",\r\n    \"    'last_major_overhaul': 'datetime64[ns]',\\n\",\r\n    \"    'location': str,\\n\",\r\n    \"    'criticality': 'category'\\n\",\r\n    \"}\\n\",\r\n    \"\\n\",\r\n    \"OPERATIONAL_COLUMNS = {\\n\",\r\n    \"    'equipment_id': np.int32,\\n\",\r\n    \"    'date': 'datetime64[ns]',\\n\",\r\n    \"    'production_rate': np.float32,\\n\",\r\n    \"    'operating_hours': np.float32,\\n\",\r\n    \"    'downtime_hours': np.float32,\\n\",\r\n    \"    'operator_id': np.int32,\\n\",\r\n    \"    'product_type': 'category',\\n\",\r\n    \"    'raw_material_quality': 'category',\\n\",\r\n    \"    'ambient_temperature': np.float32,\\n\",\r\n    \"    'ambient_humidity': np.float32\\n\",\r\n    \"}\"\r\n   ],\r\n   \"id\": \"ad39c6aa60ddd52f\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 2\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.140410Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.134901Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def generate_sensor_data(num_equipment, num_days):\\n\",\r\n    \"    start_date = datetime.now() - timedelta(days=num_days)\\n\",\r\n    \"    date_range = pd.date_range(start=start_date, periods=num_days*4, freq='6H')\\n\",\r\n    \"    \\n\",\r\n    \"    data = []\\n\",\r\n    \"    for equipment_id in range(1, num_equipment + 1):\\n\",\r\n    \"        for timestamp in date_range:\\n\",\r\n    \"            data.append({\\n\",\r\n    \"                'equipment_id': equipment_id,\\n\",\r\n    \"                'timestamp': timestamp,\\n\",\r\n    \"                'temperature': np.random.normal(60, 10),\\n\",\r\n    \"                'vibration': np.random.normal(0.5, 0.1),\\n\",\r\n    \"                'pressure': np.random.normal(100, 20),\\n\",\r\n    \"                'rotational_speed': np.random.normal(1000, 100),\\n\",\r\n    \"                'power_output': np.random.normal(500, 50),\\n\",\r\n    \"                'noise_level': np.random.normal(70, 5),\\n\",\r\n    \"                'voltage': np.random.normal(220, 10),\\n\",\r\n    \"                'current': np.random.normal(100, 10),\\n\",\r\n    \"                'oil_viscosity': np.random.normal(50, 5)\\n\",\r\n    \"            })\\n\",\r\n    \"    \\n\",\r\n    \"    df = pd.DataFrame(data)\\n\",\r\n    \"    return df.astype(SENSOR_COLUMNS)\"\r\n   ],\r\n   \"id\": \"1c7d2e2f9789f1f2\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 3\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.146967Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.141952Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def generate_maintenance_logs(num_equipment, num_years):\\n\",\r\n    \"    end_date = datetime.now()\\n\",\r\n    \"    start_date = end_date - timedelta(days=365 * num_years)\\n\",\r\n    \"    date_range = pd.date_range(start=start_date, end=end_date)\\n\",\r\n    \"    \\n\",\r\n    \"    data = []\\n\",\r\n    \"    for equipment_id in range(1, num_equipment + 1):\\n\",\r\n    \"        for date in date_range:\\n\",\r\n    \"            if np.random.random() < 0.01:  # 1% chance of maintenance event\\n\",\r\n    \"                maintenance_type = np.random.choice(['Routine', 'Repair', 'Replacement', 'Inspection'])\\n\",\r\n    \"                data.append({\\n\",\r\n    \"                    'equipment_id': equipment_id,\\n\",\r\n    \"                    'date': date,\\n\",\r\n    \"                    'maintenance_type': maintenance_type,\\n\",\r\n    \"                    'description': f\\\"{maintenance_type} maintenance performed\\\",\\n\",\r\n    \"                    'technician_id': np.random.randint(1, 51),\\n\",\r\n    \"                    'duration_hours': np.random.uniform(1, 8),\\n\",\r\n    \"                    'cost': np.random.uniform(100, 5000),\\n\",\r\n    \"                    'parts_replaced': np.random.choice(['None', 'Bearings', 'Seals', 'Filters', 'Motor'], p=[0.6, 0.1, 0.1, 0.1, 0.1]),\\n\",\r\n    \"                    'maintenance_result': np.random.choice(['Successful', 'Partial', 'Failed'], p=[0.8, 0.15, 0.05])\\n\",\r\n    \"                })\\n\",\r\n    \"    \\n\",\r\n    \"    df = pd.DataFrame(data)\\n\",\r\n    \"    return df.astype(MAINTENANCE_COLUMNS)\"\r\n   ],\r\n   \"id\": \"92300c46f393ddc7\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 4\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.153615Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.147996Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def generate_equipment_specs(num_equipment):\\n\",\r\n    \"    data = []\\n\",\r\n    \"    for equipment_id in range(1, num_equipment + 1):\\n\",\r\n    \"        installation_date = datetime.now() - timedelta(days=np.random.randint(365, 3650))\\n\",\r\n    \"        data.append({\\n\",\r\n    \"            'equipment_id': equipment_id,\\n\",\r\n    \"            'model': f\\\"Model-{np.random.randint(1000, 9999)}\\\",\\n\",\r\n    \"            'manufacturer': np.random.choice(['ManufacturerA', 'ManufacturerB', 'ManufacturerC']),\\n\",\r\n    \"            'installation_date': installation_date,\\n\",\r\n    \"            'max_temperature': np.random.uniform(80, 100),\\n\",\r\n    \"            'max_pressure': np.random.uniform(150, 200),\\n\",\r\n    \"            'max_rotational_speed': np.random.uniform(1000, 2000),\\n\",\r\n    \"            'expected_lifetime_years': np.random.uniform(10, 20),\\n\",\r\n    \"            'warranty_period_years': np.random.randint(1, 6),\\n\",\r\n    \"            'last_major_overhaul': installation_date + timedelta(days=np.random.randint(365, 1825)),\\n\",\r\n    \"            'location': f\\\"Section-{np.random.randint(1, 6)}\\\",\\n\",\r\n    \"            'criticality': np.random.choice(['High', 'Medium', 'Low'], p=[0.2, 0.5, 0.3])\\n\",\r\n    \"        })\\n\",\r\n    \"    \\n\",\r\n    \"    df = pd.DataFrame(data)\\n\",\r\n    \"    return df.astype(EQUIPMENT_COLUMNS)\"\r\n   ],\r\n   \"id\": \"c61365cdc5187ee7\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 5\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.160623Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.154623Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def generate_operational_data(num_equipment, num_days):\\n\",\r\n    \"    start_date = datetime.now() - timedelta(days=num_days)\\n\",\r\n    \"    date_range = pd.date_range(start=start_date, periods=num_days)\\n\",\r\n    \"    \\n\",\r\n    \"    data = []\\n\",\r\n    \"    for equipment_id in range(1, num_equipment + 1):\\n\",\r\n    \"        for date in date_range:\\n\",\r\n    \"            data.append({\\n\",\r\n    \"                'equipment_id': equipment_id,\\n\",\r\n    \"                'date': date,\\n\",\r\n    \"                'production_rate': np.random.uniform(80, 100),\\n\",\r\n    \"                'operating_hours': np.random.uniform(20, 24),\\n\",\r\n    \"                'downtime_hours': np.random.uniform(0, 4),\\n\",\r\n    \"                'operator_id': np.random.randint(1, 101),\\n\",\r\n    \"                'product_type': np.random.choice(['TypeA', 'TypeB', 'TypeC']),\\n\",\r\n    \"                'raw_material_quality': np.random.choice(['High', 'Medium', 'Low'], p=[0.7, 0.2, 0.1]),\\n\",\r\n    \"                'ambient_temperature': np.random.normal(25, 5),\\n\",\r\n    \"                'ambient_humidity': np.random.uniform(30, 70)\\n\",\r\n    \"            })\\n\",\r\n    \"    \\n\",\r\n    \"    df = pd.DataFrame(data)\\n\",\r\n    \"    return df.astype(OPERATIONAL_COLUMNS)\"\r\n   ],\r\n   \"id\": \"2ed1f1c14910e453\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 6\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:50:31.165820Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.161130Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def get_dataframe_size(df):\\n\",\r\n    \"    return df.memory_usage(deep=True).sum() / (1024 * 1024)  # Size in MB\\n\",\r\n    \"\\n\",\r\n    \"def print_dataset_info(name, df, columns):\\n\",\r\n    \"    print(f\\\"\\\\n{name} Dataset:\\\")\\n\",\r\n    \"    print(f\\\"Number of rows: {df.shape[0]}\\\")\\n\",\r\n    \"    print(f\\\"Size in memory: {get_dataframe_size(df):.2f} MB\\\")\\n\",\r\n    \"    print(\\\"Columns:\\\")\\n\",\r\n    \"    for col, dtype in columns.items():\\n\",\r\n    \"        print(f\\\"  - {col}: {dtype}\\\")\"\r\n   ],\r\n   \"id\": \"336a669e25c5eda4\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 7\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T14:56:54.127598Z\",\r\n     \"start_time\": \"2024-10-03T14:50:31.166829Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Generate datasets\\n\",\r\n    \"num_equipment = 1000\\n\",\r\n    \"num_days = 365 * 3  # 3 years\\n\",\r\n    \"num_years = 3\\n\",\r\n    \"\\n\",\r\n    \"print(\\\"Generating datasets...\\\")\\n\",\r\n    \"sensor_data = generate_sensor_data(num_equipment, num_days)\\n\",\r\n    \"maintenance_logs = generate_maintenance_logs(num_equipment, num_years)\\n\",\r\n    \"equipment_specs = generate_equipment_specs(num_equipment)\\n\",\r\n    \"operational_data = generate_operational_data(num_equipment, num_days)\"\r\n   ],\r\n   \"id\": \"8617facd22eeee18\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Generating datasets...\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"name\": \"stderr\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"C:\\\\Users\\\\Precision 5560\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_14792\\\\2767248289.py:3: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.\\n\",\r\n      \"  date_range = pd.date_range(start=start_date, periods=num_days*24, freq='H')\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 8\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T15:00:29.082983Z\",\r\n     \"start_time\": \"2024-10-03T14:56:54.138127Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Print dataset information\\n\",\r\n    \"print_dataset_info(\\\"Sensor Data\\\", sensor_data, SENSOR_COLUMNS)\\n\",\r\n    \"print_dataset_info(\\\"Maintenance Logs\\\", maintenance_logs, MAINTENANCE_COLUMNS)\\n\",\r\n    \"print_dataset_info(\\\"Equipment Specifications\\\", equipment_specs, EQUIPMENT_COLUMNS)\\n\",\r\n    \"print_dataset_info(\\\"Operational Data\\\", operational_data, OPERATIONAL_COLUMNS)\\n\",\r\n    \"\\n\",\r\n    \"# Save datasets to CSV files\\n\",\r\n    \"sensor_data.to_csv('sensor_data.csv', index=False)\\n\",\r\n    \"maintenance_logs.to_csv('maintenance_logs.csv', index=False)\\n\",\r\n    \"equipment_specs.to_csv('equipment_specs.csv', index=False)\\n\",\r\n    \"operational_data.to_csv('operational_data.csv', index=False)\"\r\n   ],\r\n   \"id\": \"d35a1ba166029af7\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"\\n\",\r\n      \"Sensor Data Dataset:\\n\",\r\n      \"Number of rows: 26280000\\n\",\r\n      \"Size in memory: 1203.00 MB\\n\",\r\n      \"Columns:\\n\",\r\n      \"  - equipment_id: <class 'numpy.int32'>\\n\",\r\n      \"  - timestamp: datetime64[ns]\\n\",\r\n      \"  - temperature: <class 'numpy.float32'>\\n\",\r\n      \"  - vibration: <class 'numpy.float32'>\\n\",\r\n      \"  - pressure: <class 'numpy.float32'>\\n\",\r\n      \"  - rotational_speed: <class 'numpy.float32'>\\n\",\r\n      \"  - power_output: <class 'numpy.float32'>\\n\",\r\n      \"  - noise_level: <class 'numpy.float32'>\\n\",\r\n      \"  - voltage: <class 'numpy.float32'>\\n\",\r\n      \"  - current: <class 'numpy.float32'>\\n\",\r\n      \"  - oil_viscosity: <class 'numpy.float32'>\\n\",\r\n      \"\\n\",\r\n      \"Maintenance Logs Dataset:\\n\",\r\n      \"Number of rows: 10999\\n\",\r\n      \"Size in memory: 1.92 MB\\n\",\r\n      \"Columns:\\n\",\r\n      \"  - equipment_id: <class 'numpy.int32'>\\n\",\r\n      \"  - date: datetime64[ns]\\n\",\r\n      \"  - maintenance_type: category\\n\",\r\n      \"  - description: <class 'str'>\\n\",\r\n      \"  - technician_id: <class 'numpy.int32'>\\n\",\r\n      \"  - duration_hours: <class 'numpy.float32'>\\n\",\r\n      \"  - cost: <class 'numpy.float32'>\\n\",\r\n      \"  - parts_replaced: <class 'str'>\\n\",\r\n      \"  - maintenance_result: category\\n\",\r\n      \"\\n\",\r\n      \"Equipment Specifications Dataset:\\n\",\r\n      \"Number of rows: 1000\\n\",\r\n      \"Size in memory: 0.15 MB\\n\",\r\n      \"Columns:\\n\",\r\n      \"  - equipment_id: <class 'numpy.int32'>\\n\",\r\n      \"  - model: <class 'str'>\\n\",\r\n      \"  - manufacturer: category\\n\",\r\n      \"  - installation_date: datetime64[ns]\\n\",\r\n      \"  - max_temperature: <class 'numpy.float32'>\\n\",\r\n      \"  - max_pressure: <class 'numpy.float32'>\\n\",\r\n      \"  - max_rotational_speed: <class 'numpy.float32'>\\n\",\r\n      \"  - expected_lifetime_years: <class 'numpy.float32'>\\n\",\r\n      \"  - warranty_period_years: <class 'numpy.int32'>\\n\",\r\n      \"  - last_major_overhaul: datetime64[ns]\\n\",\r\n      \"  - location: <class 'str'>\\n\",\r\n      \"  - criticality: category\\n\",\r\n      \"\\n\",\r\n      \"Operational Data Dataset:\\n\",\r\n      \"Number of rows: 1095000\\n\",\r\n      \"Size in memory: 39.68 MB\\n\",\r\n      \"Columns:\\n\",\r\n      \"  - equipment_id: <class 'numpy.int32'>\\n\",\r\n      \"  - date: datetime64[ns]\\n\",\r\n      \"  - production_rate: <class 'numpy.float32'>\\n\",\r\n      \"  - operating_hours: <class 'numpy.float32'>\\n\",\r\n      \"  - downtime_hours: <class 'numpy.float32'>\\n\",\r\n      \"  - operator_id: <class 'numpy.int32'>\\n\",\r\n      \"  - product_type: category\\n\",\r\n      \"  - raw_material_quality: category\\n\",\r\n      \"  - ambient_temperature: <class 'numpy.float32'>\\n\",\r\n      \"  - ambient_humidity: <class 'numpy.float32'>\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 9\r\n  },\r\n  {\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-10-03T15:00:29.090184Z\",\r\n     \"start_time\": \"2024-10-03T15:00:29.084989Z\"\r\n    }\r\n   },\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Calculate total size of CSV files\\n\",\r\n    \"total_size_mb = sum(os.path.getsize(f) for f in ['sensor_data.csv', 'maintenance_logs.csv', 'equipment_specs.csv', 'operational_data.csv']) / (1024 * 1024)\\n\",\r\n    \"print(f\\\"\\\\nTotal size of all CSV files: {total_size_mb:.2f} MB\\\")\"\r\n   ],\r\n   \"id\": \"5a065fcbe01d182e\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"\\n\",\r\n      \"Total size of all CSV files: 3079.45 MB\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 10\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
===================================================================
diff --git a/Synthetic Data Generator for Predictive Maintenance.ipynb b/Synthetic Data Generator for Predictive Maintenance.ipynb
--- a/Synthetic Data Generator for Predictive Maintenance.ipynb	(revision a6297e67727fff8a1bd9326d205cec7c37e7c5c7)
+++ b/Synthetic Data Generator for Predictive Maintenance.ipynb	(date 1728465815542)
@@ -98,7 +98,7 @@
    "source": [
     "def generate_sensor_data(num_equipment, num_days):\n",
     "    start_date = datetime.now() - timedelta(days=num_days)\n",
-    "    date_range = pd.date_range(start=start_date, periods=num_days*4, freq='6H')\n",
+    "    date_range = pd.date_range(start=start_date, periods=num_days*4, freq='6h')\n",
     "    \n",
     "    data = []\n",
     "    for equipment_id in range(1, num_equipment + 1):\n",
